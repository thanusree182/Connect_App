"use strict";
var per_1 = require("./per");
var failed = 0;
function assert(expected, actual) {
    var expectedStr = JSON.stringify(expected);
    var actualStr = JSON.stringify(actual);
    if (expectedStr != actualStr) {
        console.error('');
        console.error('============= ERROR =============');
        console.error('');
        console.error('Expected: ' + expectedStr);
        console.error('  Actual: ' + actualStr);
        console.error('');
        failed++;
    }
    else {
        console.log('    Good: ' + actualStr);
    }
}
;
var result;
per_1.default('hi').forEach(function (value) { result = value; });
assert('hi', result);
assert('hi', per_1.default('hi').first());
assert('hi', per_1.default(['hi', 'oh', 'bye']).first());
assert('bye', per_1.default(['hi', 'oh', 'bye']).last());
assert(5, per_1.default(5).last());
assert([1, 2, 3], per_1.default([[1, 2, 3]]).first());
assert([1, 2, 3], per_1.default([1, 2, 3]).all());
assert([2, 4, 6], per_1.default([1, 2, 3]).map(function (x) { return x * 2; }).all());
assert(["1", "2", "3"], per_1.default([1, 2, 3]).map(function (x) { return x + ""; }).all());
var concat = function (left, right) { return left + ' ' + right; };
assert(['hi'], per_1.default('hi').reduce(concat).all());
assert(['hi', 'hi ho'], per_1.default(['hi', 'ho']).reduce(concat).all());
assert(['hi', 'hi ho', 'hi ho silver'], per_1.default(['hi', 'ho', 'silver']).reduce(concat).all());
assert([4, 'str', true, {}], per_1.default([0, 4, '', 'str', false, true, null, {}]).truthy().all());
function odds(emit) {
    for (var n = 1; n < 15; n += 2) {
        emit(n);
    }
}
;
assert([7, 9, 11, 13], per_1.default(odds).skip(3).all());
assert([5, 7, 9], per_1.default(odds).skip(2).take(3).all());
function censor(emit, value) {
    if (typeof value === 'string' && value.length <= 5) {
        emit(value);
    }
    else {
        emit('SORRY');
        emit('REDACTED');
    }
}
;
assert(['This', 'array', 'only', 'SORRY', 'REDACTED', 'short', 'SORRY', 'REDACTED'], per_1.default(['This', 'array', 'only', 'contains', 'short', 'strings']).per(censor).all());
function indexes() {
    var counter = 0;
    return function (emit, value) {
        emit([counter++, value]);
    };
}
;
assert([[0, 'first'], [1, 'second'], [2, 'third']], per_1.default(['first', 'second', 'third']).per(indexes()).all());
var i = indexes();
assert([[0, 'first'], [1, 'second'], [2, 'third']], per_1.default(['first', 'second', 'third']).per(i).all());
assert([[3, 'first'], [4, 'second'], [5, 'third']], per_1.default(['first', 'second', 'third']).per(i).all());
function dup(emit, value) {
    emit(value);
    emit(value);
}
;
assert(['a', 'a', 'b', 'b', 'c', 'c'], per_1.default(['a', 'b', 'c']).per(dup).all());
assert([[0, 'a'], [1, 'a'], [2, 'b'], [3, 'b'], [4, 'c'], [5, 'c']], per_1.default(['a', 'b', 'c']).per(dup).per(indexes()).all());
assert([[0, 'a'], [0, 'a'], [1, 'b'], [1, 'b'], [2, 'c'], [2, 'c']], per_1.default(['a', 'b', 'c']).per(indexes()).per(dup).all());
var TestClass = (function () {
    function TestClass() {
        this.a = 'a';
        this.b = 'b';
        this.c = 'c';
    }
    TestClass.prototype.things = function (emit) {
        emit(this.a);
        emit(this.b);
        emit(this.c);
    };
    return TestClass;
}());
var testObj = new TestClass();
assert(['a', 'b', 'c'], per_1.default(testObj.things, testObj).all());
assert([4, 2], per_1.default(4).concat(2).all());
assert([4, 2, 1], per_1.default(4).concat([2, 1]).all());
assert([4, 2, 1], per_1.default(4).concat(function (emit) { emit(2); emit(1); }).all());
assert([4, 2, 1, 6], per_1.default(4).concat(per_1.default([2, 1, 6])).all());
assert([4, 2, 1, 6, 5], per_1.default(4).concat(per_1.default([2, 1, 6])).concat(function (emit) { emit(5); }).all());
assert([4, 2, 1, 6, 5, 3, 9], per_1.default(4).concat(per_1.default([2, 1, 6])).concat(function (emit) { emit(5); }).concat([3, 9]).all());
if (failed === 0) {
    console.log('');
    console.log('All good');
}
process.exitCode = failed;
