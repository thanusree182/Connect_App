"use strict";
function toFunc(valOrFunc, bindThis) {
    if (typeof valOrFunc !== "function") {
        return Array.isArray(valOrFunc)
            ? function (emit) { return valOrFunc.some(emit); }
            : function (emit) { return emit(valOrFunc); };
    }
    else {
        var func_1 = valOrFunc;
        if (bindThis) {
            return function (emit, value) { return func_1.call(bindThis, emit, value); };
        }
        return func_1;
    }
}
var Per = (function () {
    function Per(valOrFunc, bindThis) {
        this.forEach = toFunc(valOrFunc, bindThis);
    }
    Per.prototype.per = function (valOrFunc, bindThis) {
        var first = this.forEach;
        var second = per(valOrFunc, bindThis).forEach;
        return per(function (emit, value) { return first(function (firstOut) { return second(emit, firstOut); }, value); });
    };
    Per.prototype.map = function (mapFunc) {
        return this.per(function (emit, value) { return emit(mapFunc(value)); });
    };
    Per.prototype.filter = function (predicate) {
        return this.per(function (emit, value) {
            if (predicate(value)) {
                return emit(value);
            }
        });
    };
    Per.prototype.concat = function (second, secondThis) {
        var secondFunc = second instanceof Per ? second.forEach : toFunc(second, secondThis);
        var firstFunc = this.forEach;
        return per(function (emit, value) {
            return firstFunc(emit, value) || secondFunc(emit, value);
        });
    };
    Per.prototype.skip = function (count) {
        return this.per(function (emit, value) {
            if (count > 0) {
                count--;
                return false;
            }
            return emit(value);
        });
    };
    Per.prototype.take = function (count) {
        return this.per(function (emit, value) {
            if (count <= 0) {
                return true;
            }
            count--;
            return emit(value);
        });
    };
    Per.prototype.listen = function (untilFunc) {
        return this.per(function (emit, value) {
            if (untilFunc(value)) {
                return true;
            }
            return emit(value);
        });
    };
    Per.prototype.reduceWithSeed = function (reducer, seed) {
        var result = seed;
        return this.per(function (emit, value) {
            result = reducer(result, value);
            return emit(result);
        });
    };
    Per.prototype.reduceWithoutSeed = function (reducer) {
        var result;
        var started = false;
        return this.per(function (emit, value) {
            result = started ? reducer(result, value) : value;
            var complete = emit(result);
            started = true;
            return complete;
        });
    };
    Per.prototype.reduce = function (reducer, seed) {
        return arguments.length === 2
            ? this.reduceWithSeed(reducer, seed)
            : this.reduceWithoutSeed(reducer);
    };
    Per.prototype.into = function (ar, limit) {
        if (!Array.isArray(ar)) {
            throw new Error("into expects an array");
        }
        limit = optionalLimit(limit);
        return this.listen(function (value) {
            if (limit <= 0) {
                return true;
            }
            ar.push(value);
            limit--;
        });
    };
    Per.prototype.submit = function (value) {
        return this.forEach(ignore, value);
    };
    Per.prototype.all = function (value) {
        var results = [];
        this.into(results).submit(value);
        return results;
    };
    Per.prototype.first = function (value) {
        var first;
        this.listen(function (v) {
            first = v;
            return true;
        }).submit(value);
        return first;
    };
    Per.prototype.last = function (value) {
        var last;
        this.listen(function (v) {
            last = v;
            return false;
        }).submit(value);
        return last;
    };
    Per.prototype.truthy = function () {
        return this.filter(truthy);
    };
    return Per;
}());
exports.Per = Per;
function blank(emit, value) {
    emit(value);
}
function per(valOrFunc, bindThis) {
    if (!valOrFunc || arguments.length === 0) {
        return new Per(blank);
    }
    if (valOrFunc instanceof Per) {
        return valOrFunc;
    }
    else {
        return new Per(valOrFunc, bindThis);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = per;
function optionalLimit(limit) {
    return typeof limit != 'number' ? Number.MAX_VALUE : limit;
}
function ignore() {
    return false;
}
function truthy(value) {
    return !!value;
}
